kafka.bootstrap.servers=localhost:9092
kafka.max.request.size=4000000

# logging configuration
#quarkus.log.level=DEBUG

quarkus.http.cors=true
quarkus.swagger-ui.always-include=true

%dev.kafka.bootstrap.servers=localhost:9092
%prod.kafka.bootstrap.servers=gtfs-sse-cluster-kafka-bootstrap:9092

mp.messaging.outgoing.gtfs-out.connector=smallrye-kafka
mp.messaging.outgoing.gtfs-out.client.id=gtfs-producer
mp.messaging.outgoing.gtfs-out.topic=gtfs
mp.messaging.outgoing.gtfs-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.gtfs-out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer

mp.messaging.outgoing.latest-gtfs-out.connector=smallrye-kafka
mp.messaging.outgoing.latest-gtfs-out.client.id=gtfs-producer
mp.messaging.outgoing.latest-gtfs-out.topic=latest-gtfs
mp.messaging.outgoing.latest-gtfs-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.latest-gtfs-out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer

#mp.messaging.outgoing.gtfs-out.key.serializer=org.apache.kafka.common.serialization.LongSerializer
#mp.messaging.outgoing.gtfs-out.value.serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer
#mp.messaging.outgoing.gtfs-out.apicurio.registry.url=http://localhost:8081/api
#mp.messaging.outgoing.gtfs-out.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.TopicIdStrategy
#mp.messaging.outgoing.gtfs-out.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy

mp.messaging.incoming.gtfs-in.connector=smallrye-kafka
mp.messaging.incoming.gtfs-in.group.id=gtfs-consumer
mp.messaging.incoming.gtfs-in.client.id=gtfs-consumer
mp.messaging.incoming.gtfs-in.auto.offset.reset=earliest
mp.messaging.incoming.gtfs-in.topic=gtfs
mp.messaging.incoming.gtfs-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.gtfs-in.value.deserializer= io.vertx.kafka.client.serialization.JsonObjectDeserializer

mp.messaging.incoming.latest-gtfs-in.connector=smallrye-kafka
mp.messaging.incoming.latest-gtfs-in.group.id=gtfs-consumer
mp.messaging.incoming.latest-gtfs-in.client.id=gtfs-consumer
mp.messaging.incoming.latest-gtfs-in.auto.offset.reset=earliest
mp.messaging.incoming.latest-gtfs-in.topic=latest-gtfs
mp.messaging.incoming.latest-gtfs-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.latest-gtfs-in.value.deserializer= io.vertx.kafka.client.serialization.JsonObjectDeserializer

#mp.messaging.incoming.gtfs-in.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
#mp.messaging.incoming.gtfs-in.value.deserializer=io.apicurio.registry.utils.serde.AvroKafkaDeserializer
#mp.messaging.incoming.gtfs-in.apicurio.registry.url=http://localhost:8081/api
#mp.messaging.incoming.gtfs-in.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.TopicIdStrategy
#mp.messaging.incoming.gtfs-in.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy

# postgres client
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username = hibernate
quarkus.datasource.password = hibernate
quarkus.hibernate-orm.database.generation=none
%dev.quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:6875/materialize
%prod.quarkus.datasource.jdbc.url = jdbc:postgresql://${MATERIALIZE_SERVICE_HOST}:${MATERIALIZE_SERVICE_PORT_PSQL}/materialize

# reactive pg client does not work with materialize '-o-'
#quarkus.datasource.username=
#quarkus.datasource.password=
#quarkus.datasource.reactive.url=postgresql://localhost:6875/materialize
#datasource.reactive.postgresql.sslMode=DISABLE
